processCapcha();

async function processCapcha() {
    let access = await chrome.storage.local.get(["wor_captcha_active"]);

    if (!access.wor_captcha_active) {
        log('–û–±—Ö–æ–¥ –∫–∞–ø—á–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.');
        return;
    }

    log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å');
    await delay(getRandomNumber(3000, 10000));
    // üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    let firstImageElement = document.querySelector('img[src^="captcha.php"]');
    let otherImageElements = Array.from(document.querySelectorAll('img[src^="captcha_users.php"]'));

    // ‚úÖ –ë–µ—Ä–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä—è–º–æ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
    let firstImageFile = await getImageFromDOM(firstImageElement, "first.jpg");

    // ‚úÖ –ë–µ—Ä–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ 10 –∫–∞—Ä—Ç–∏–Ω–æ–∫
    let otherImageFiles = await Promise.all(
        otherImageElements.map(async (img) => {
            let kParam = getParamFromUrl(img.src, "k"); // –ü–æ–ª—É—á–∞–µ–º "k" –∏–∑ URL
            let filename = kParam ? `${kParam}` : "unknown"; // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            return getImageFromDOM(img, filename);
        })
    );

    let reqs = await getCaptchaRequirements(firstImageFile);
    log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω–∏—â–∏–Ω —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ä–∞–≤–Ω–æ:' + JSON.stringify(reqs));
    let check = await checkRigthImage(otherImageFiles, reqs);
    log('–ü–æ–ª—É—á–∏–ª–∏ id –Ω—É–∂–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏:' + JSON.stringify(check.matching_image));

    if (check.matching_image !== false) {
        let img = document.querySelector(`img[src*=${check.matching_image}]`)

        if (img) {
            img.click();
            log('–í—ã–±—Ä–∞–ª–∏ –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É');
            await delay(getRandomNumber(1000, 2000));
            log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º');
            await delay(getRandomNumber(1000, 2000));
            document.querySelector(`input[type=submit]`).click();
        }
    } else {
        throw new Error("matching_image –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

}

function getImageFromDOM(imgElement, filename = "image.jpg") {
    try {
        let canvas = document.createElement("canvas");
        let ctx = canvas.getContext("2d");

        canvas.width = imgElement.naturalWidth;
        canvas.height = imgElement.naturalHeight;

        ctx.drawImage(imgElement, 0, 0);

        return new Promise(resolve => {
            canvas.toBlob(blob => {
                resolve(new File([blob], filename, { type: blob.type }));
            }, "image/png"); // –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç (png, jpeg)
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ DOM:", error);
        return null;
    }
}

function getParamFromUrl(url, param) {
    let urlObj = new URL(url, window.location.origin);
    return urlObj.searchParams.get(param);
}

async function checkRigthImage(otherImageFiles, detectResult) {
    try {
        let matchFormData = new FormData();
        otherImageFiles.forEach(file => matchFormData.append("files", file));
        matchFormData.append("expected", JSON.stringify(detectResult));

        let matchResponse = await fetch("http://localhost:8585/find_matching_image", {
            method: "POST",
            body: matchFormData
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if (!matchResponse.ok) {
            let errorText = await matchResponse.text(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            throw new Error(`–û—à–∏–±–∫–∞ find_matching_image (–∫–æ–¥ ${matchResponse.status}): ${errorText}`);
        }

        let matchResult = await matchResponse.json();
        return matchResult;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞:", error.message);
    }
}

async function getCaptchaRequirements(firstImageFile) {
    try {
        let detectFormData = new FormData();
        detectFormData.append("image", firstImageFile);

        let detectResponse = await fetch("http://localhost:8585/detect_numbers", {
            method: "POST",
            body: detectFormData
        });

        if (!detectResponse.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ detect_numbers");
        let detectResult = await detectResponse.json();
        return detectResult;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞:", error.message);
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ detect_numbers")
    }
}
